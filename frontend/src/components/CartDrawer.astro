---
// CartDrawer - Einfach: Backend-Daten mappen und anzeigen
---

<button id="open-drawer" class="open-drawer-btn">
  <img src="/assets/shopping-cart.webp" alt="shopping cart icon">
</button>
<dialog id="drawer" aria-labelledby="drawer-title">
  <div class="dialog-backdrop"></div>
  
  <div class="dialog-focus-trap">
    <div class="dialog-panel">
      <div class="drawer-content">
        <div class="drawer-main">
          <div class="drawer-header">
            <h2 id="drawer-title">Shopping cart</h2>
            <div class="close-button-container">
              <button type="button" id="close-drawer" class="close-button">
                <span class="sr-only">Close panel</span>
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" aria-hidden="true" class="close-icon">
                  <path d="M6 18 18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
              </button>
            </div>
          </div>

          <div class="cart-items">
            <div class="items-container">
              <ul role="list" class="items-list" id="cart-items-list">
                <!-- Items werden dynamisch geladen -->
              </ul>
            </div>
          </div>

          <div class="drawer-footer">
            <div class="subtotal">
              <p>Subtotal</p>
              <p id="subtotal-amount">0.00 €</p>
            </div>
            <div class="discount-summary" id="discount-summary" style="display: none;">
                <div class="subtotal-discounted">
                  <p>Rabattpreis</p>
                <p id="subtotal-discounted-amount">0.00 €</p>
                </div>
                <div class="total-savings">
                  <p>Gesamtersparnis</p>
                <p class="savings-amount" id="total-savings-amount">0.00 €</p>
              </div>
            </div>
            <p class="shipping-note">Shipping and taxes calculated at checkout.</p>
            <div class="checkout-section">
              <button type="button" class="checkout-button">Checkout</button>
            </div>
            <div class="continue-shopping">
              <p>
                or
                <button type="button" id="continue-shopping" class="continue-button">
                  Continue Shopping
                  <span aria-hidden="true"> &rarr;</span>
                </button>
              </p>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>
</dialog>



<script>
/**
 * CartDrawer - Client-Side Cart Management
 * 
 * Handles dynamic cart loading, quantity updates, and discount calculations.
 * All data is fetched from the FastAPI backend and rendered client-side.
 * 
 */

document.addEventListener('DOMContentLoaded', () => {
  
  /**
   * Loads cart data from backend and renders the cart items
   * 
   * Fetches annotated cart data including discounts and renders all items
   * with their quantities, prices, and discount information. Updates the
   * subtotal and discount summary sections.
   * 
   * @async
   * @function loadCart
   * @returns {Promise<void>}
   * @throws {Error} If API call fails or data parsing fails
   * @example
   * // Load and display current cart
   * await loadCart();
   */
  async function loadCart() {
    try {
      // Fetch annotated cart data from FastAPI backend
      const res = await fetch('http://localhost:8000/cart/annotated');
      const data = await res.json();
      
      // Get cart items container and render items with innerHTML
      const container = document.getElementById('cart-items-list');
      container.innerHTML = data.items.map(item => `
        <li class="cart-item" data-product-id="${item.productId}">
          <div class="item-image">
            <img src="/assets/product-1.png" alt="Product image" />
          </div>
          <div class="item-details">
            <div>
              <div class="item-header">
                <h3><a href="#">${item.name || item.productId}</a></h3>
                <p class="item-price">${item.unit_price.toFixed(2)} €</p>
              </div>
              <p class="item-variant">${item.category || '—'} ${item.rabatt ? '• Rabattfähig' : ''}</p>
            </div>
            <div class="item-footer">
              <div class="quantity-controls">
                <button type="button" class="quantity-btn" data-action="decrease" data-product-id="${item.productId}">-</button>
                <span class="item-quantity">Qty ${item.quantity}</span>
                <button type="button" class="quantity-btn" data-action="increase" data-product-id="${item.productId}">+</button>
              </div>
              <div class="item-actions">
                <button type="button" class="remove-button" data-action="remove" data-product-id="${item.productId}">Remove</button>
              </div>
            </div>
            <div class="line-total">
              <p class="original-total">Summe: ${item.line_total.toFixed(2)} €</p>
              ${item.rabatt && item.line_total_discounted < item.line_total ? `
                <div class="discount-info">
                  <p class="discounted-total">Rabattpreis: ${item.line_total_discounted.toFixed(2)} €</p>
                  <p class="savings">Ersparnis: ${item.savings_total.toFixed(2)} €</p>
                </div>
              ` : ''}
            </div>
          </div>
        </li>
      `).join('');
      
      // Update subtotal display
      document.getElementById('subtotal-amount').textContent = `${data.subtotal.toFixed(2)} €`;
      
      // Handle discount summary visibility and values
      const discountSummary = document.getElementById('discount-summary');
      const hasDiscounts = data.items.some(item => item.rabatt && item.savings_total > 0);
      
      if (hasDiscounts) {
        discountSummary.style.display = 'block';
        document.getElementById('subtotal-discounted-amount').textContent = `${data.subtotal_discounted.toFixed(2)} €`;
        document.getElementById('total-savings-amount').textContent = `${data.total_savings.toFixed(2)} €`;
      } else {
        discountSummary.style.display = 'none';
      }
      
    } catch (err) {
      console.error("Fehler beim Laden des Warenkorbs:", err);
    }
  }

  /**
   * Update product quantity in backend
   * 
   * Backend macht alle Berechnungen - Frontend nur API-Calls
   * 
   * @async
   * @function updateProductQuantity
   * @param {string} productId - The product ID to update
   * @param {string} action - The action ('increase', 'decrease', 'remove')
   * @returns {Promise<void>}
   * @throws {Error} If API call fails
   */
  async function updateProductQuantity(productId, action) {
    // Aktuelle Menge holen
    const cartResponse = await fetch('http://localhost:8000/cart');
    const cart = await cartResponse.json();
    const item = cart.items.find(i => i.productId === productId);
    const currentQuantity = item?.quantity || 0;
    
    let newQuantity = currentQuantity;
    if (action === 'increase') {
      newQuantity = currentQuantity + 1;
    } else if (action === 'decrease') {
      newQuantity = Math.max(0, currentQuantity - 1);
    } else if (action === 'remove') {
      newQuantity = 0;
    }
    
    // Backend macht alle Berechnungen - nur Menge setzen
    await fetch(`http://localhost:8000/cart/items/${productId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ quantity: newQuantity })
    });
  }

  // Initialize cart on page load
  loadCart();

  /**
   * Event listener for external cart updates
   * 
   * Listens for 'cartUpdated' events from other components (like ProductSection)
   * and reloads the cart to reflect changes.
   */
  window.addEventListener('cartUpdated', loadCart);

  /**
   * Event listener for cart item interactions
   * 
   * Handles clicks on quantity buttons (+/-) and remove buttons.
   * Updates the backend and refreshes the cart display without
   * closing the drawer.
   * 
   * @param {Event} e - The click event
   */
  document.addEventListener('click', async (e) => {
    // Check if clicked element is a cart control button
    if (e.target.classList.contains('quantity-btn') || e.target.classList.contains('remove-button')) {
      const productId = e.target.dataset.productId;
      const action = e.target.dataset.action;
      
      
      await updateProductQuantity(productId, action);
      
      // Reload cart display (drawer stays open)
      loadCart();
    }
  });

});
</script>

<script src="../scripts/cartDrawer.js"></script>

<style>
/* Global styles für dynamisch eingefügtes HTML */
:global(.cart-item) {
  display: flex;
  padding: 24px 0;
  border-bottom: 1px solid #e5e7eb;
}

:global(.item-image) {
  width: 96px;
  height: 96px;
  flex-shrink: 0;
  overflow: hidden;
  border-radius: 6px;
  border: 1px solid #e5e7eb;
}

:global(.item-image img) {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

:global(.item-details) {
  margin-left: 16px;
  display: flex;
  flex: 1;
  flex-direction: column;
}

:global(.item-header) {
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  font-weight: 500;
  color: #111827;
}

:global(.item-header h3) {
  margin: 0;
}

:global(.item-header h3 a) {
  color: inherit;
  text-decoration: none;
}

:global(.item-price) {
  margin-left: 16px;
  margin: 0;
}

:global(.item-variant) {
  margin-top: 4px;
  font-size: 14px;
  color: #6b7280;
  margin: 4px 0 0 0;
}

:global(.item-footer) {
  display: flex;
  flex: 1;
  align-items: flex-end;
  justify-content: space-between;
  font-size: 14px;
}

:global(.item-quantity) {
  color: #6b7280;
  margin: 0;
}

:global(.quantity-controls) {
  display: flex;
  align-items: center;
  gap: 8px;
}

:global(.quantity-btn) {
  width: 24px;
  height: 24px;
  border: 1px solid #d1d5db;
  background-color: white;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-weight: 500;
  color: #374151;
}

:global(.quantity-btn:hover) {
  background-color: #f9fafb;
  border-color: #9ca3af;
}

:global(.item-actions) {
  display: flex;
}

:global(.remove-button) {
  font-weight: 500;
  color: #4f46e5;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
}

:global(.remove-button:hover) {
  color: #4338ca;
}

:global(.discount-info) {
  margin-top: 4px;
}

:global(.discounted-total) {
  color: #dc2626;
  font-weight: 600;
  margin: 2px 0;
  font-size: 14px;
}

:global(.savings) {
  color: #059669;
  font-weight: 600;
  margin: 2px 0;
  font-size: 14px;
}

/* Open Drawer Button */
.open-drawer-btn {
  position: absolute;
  top: 0;
  right: 0;
  margin-top: 10px;
  margin-right: 10px;
  border-radius: 100%;
  height: 60px;
  width: 60px;
  display: grid;
  place-items: center;
  background-color: #f3f3f3;
}

.open-drawer-btn img {
  height: 40px;
  width: 40px;
}

.open-drawer-btn:hover {
  background-color: rgba(3, 7, 18, 0.1);
}

/* Dialog */
#drawer {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: auto;
  height: auto;
  max-height: none;
  max-width: none;
  overflow: hidden;
  background: transparent;
  border: none;
  padding: 0;
  margin: 0;
}

#drawer:not([open]) {
  display: none;
}

/* Dialog Backdrop */
.dialog-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}


/* Dialog Focus Trap */
.dialog-focus-trap {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  padding-left: 40px;
  outline: none;
}

@media (min-width: 640px) {
  .dialog-focus-trap {
    padding-left: 64px;
  }
}

/* Dialog Panel */
.dialog-panel {
  margin-left: auto;
  display: block;
  width: 100%;
  height: 100%;
  max-width: 384px;
  transform: translateX(100%);
  transition: transform 500ms cubic-bezier(0.4, 0, 0.2, 1);
}

@media (min-width: 640px) {
  .dialog-panel {
    max-width: 460px;
    transition: transform 700ms cubic-bezier(0.4, 0, 0.2, 1);
  }
}

/* Animation when drawer is open */
#drawer[open] .dialog-panel {
  transform: translateX(0);
}

/* Drawer Content */
.drawer-content {
  display: flex;
  height: 100%;
  flex-direction: column;
  overflow-y: auto;
  background-color: white;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0);
  transition: box-shadow 500ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Animation when drawer is open */
#drawer[open] .drawer-content {
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

/* Drawer Main */
.drawer-main {
  flex: 1;
  overflow-y: auto;
  padding: 24px 16px;
}

@media (min-width: 640px) {
  .drawer-main {
    padding: 24px;
  }
}

/* Drawer Header */
.drawer-header {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
}

.drawer-header h2 {
  font-size: 18px;
  font-weight: 500;
  color: #111827;
  margin: 0;
}

.close-button-container {
  margin-left: 12px;
  display: flex;
  height: 28px;
  align-items: center;
}

.close-button {
  position: relative;
  margin: -8px;
  padding: 8px;
  color: #9ca3af;
  border: none;
  background: none;
  cursor: pointer;
}

.close-button:hover {
  color: #6b7280;
}

.close-icon {
  width: 24px;
  height: 24px;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* Cart Items */
.cart-items {
  margin-top: 32px;
}

.items-container {
  overflow: hidden;
}

.items-list {
  margin: -24px 0;
  padding: 0;
  list-style: none;
  border-top: 1px solid #e5e7eb;
}

.cart-item {
  display: flex;
  padding: 24px 0;
  border-bottom: 1px solid #e5e7eb;
}

.item-image {
  width: 96px;
  height: 96px;
  flex-shrink: 0;
  overflow: hidden;
  border-radius: 6px;
  border: 1px solid #e5e7eb;
}

.item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.item-details {
  margin-left: 16px;
  display: flex;
  flex: 1;
  flex-direction: column;
}

.item-header {
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  font-weight: 500;
  color: #111827;
}

.item-header h3 {
  margin: 0;
}

.item-header h3 a {
  color: inherit;
  text-decoration: none;
}

.item-price {
  margin-left: 16px;
  margin: 0;
}

.item-variant {
  margin-top: 4px;
  font-size: 14px;
  color: #6b7280;
  margin: 4px 0 0 0;
}

.item-footer {
  display: flex;
  flex: 1;
  align-items: flex-end;
  justify-content: space-between;
  font-size: 14px;
}

.item-quantity {
  color: #6b7280;
  margin: 0;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: 8px;
}

.quantity-btn {
  width: 24px;
  height: 24px;
  border: 1px solid #d1d5db;
  background-color: white;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-weight: 500;
  color: #374151;
}

.quantity-btn:hover {
  background-color: #f9fafb;
  border-color: #9ca3af;
}

.item-actions {
  display: flex;
}

.remove-button {
  font-weight: 500;
  color: #4f46e5;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
}

.remove-button:hover {
  color: #4338ca;
}

/* Drawer Footer */
.drawer-footer {
  border-top: 1px solid #e5e7eb;
  padding: 24px 16px;
}

@media (min-width: 640px) {
  .drawer-footer {
    padding: 24px;
  }
}

.subtotal {
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  font-weight: 500;
  color: #111827;
  margin: 0;
}

.subtotal p {
  margin: 0;
}

.discount-info {
  margin-top: 4px;
}

.discounted-total {
  color: #dc2626;
  font-weight: 600;
  margin: 2px 0;
  font-size: 14px;
}

.savings {
  color: #059669;
  font-weight: 600;
  margin: 2px 0;
  font-size: 14px;
}

.discount-summary {
  margin: 12px 0;
  padding: 12px;
  background-color: #f0fdf4;
  border-radius: 8px;
  border: 1px solid #bbf7d0;
}

.subtotal-discounted {
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  margin-bottom: 8px;
}

.subtotal-discounted p {
  margin: 0;
}

.total-savings {
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  font-weight: 600;
}

.total-savings p {
  margin: 0;
}

.savings-amount {
  color: #059669;
}

.shipping-note {
  margin-top: 2px;
  font-size: 14px;
  color: #6b7280;
  margin: 2px 0 0 0;
}

.checkout-section {
  margin-top: 24px;
}

.checkout-button {
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
  border: 1px solid transparent;
  background-color: #4f46e5;
  padding: 12px 24px;
  font-size: 16px;
  font-weight: 500;
  color: white;
  text-decoration: none;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  transition: background-color 0.2s;
}

.checkout-button:hover {
  background-color: #4338ca;
}

.continue-shopping {
  margin-top: 24px;
  display: flex;
  justify-content: center;
  text-align: center;
  font-size: 14px;
  color: #6b7280;
}

.continue-shopping p {
  margin: 0;
}

.continue-button {
  font-weight: 500;
  color: #4f46e5;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  margin-left: 4px;
}

.continue-button:hover {
  color: #4338ca;
}
</style>