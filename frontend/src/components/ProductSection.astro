---
// Einfach: Backend-Daten laden und mappen
let products = [];

try {
  const response = await fetch('http://localhost:8000/products');
  const data = await response.json();
  products = data.map(([_, productId, name, category, stock, price]) => ({
    productId,
    name,
    category,
    stock,
    price
  }));
} catch (error) {
  console.error('Fehler beim Laden der Produkte:', error);
  products = [];
}
---

<div class="w-full min-h-screen flex justify-center items-center">
  <div class="flex flex-wrap gap-5">
    {products.map((product) => (
      <div class="product w-[400px] h-fit rounded-3xl flex flex-col overflow-hidden">
        <div class="img-container w-full h-[370px]">
          <img src="/assets/product-1.png" alt={product.name} />
        </div>
        <div class="content-container w-full h-[320px]">
          <h3 class="mb-5"><b>{product.name}</b></h3>
          <p class="product-details">
            5 Intensitätsstufen<br />
            3 Frequenzen (50, 70 % 100 Hz)<br />
            App Connectivity
          </p>
          <div class="price-containe flex flex-row">
            <p class="price">
              {typeof product.price === 'number' ? `${product.price.toFixed(2)} €` : '-'}
            </p>
            <p class="discount-price" id={`discount-${product.productId}`} style="display: none;"></p>
          </div>
          <div class="flex flex-row justify-between">
            <button>Zum Produkt</button>
            <button class="buy-btn" data-product-id={product.productId}>
              <img src="/assets/shopping-cart.webp" alt="shopping cart icon" class="max-h-[30px] w-auto" />
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<script>
/**
 * ProductSection - Product Display and Cart Management
 * 
 * Handles product display, discount price rendering, and add-to-cart functionality.
 * All pricing calculations are performed by the FastAPI backend.
 * 
 */

document.addEventListener('DOMContentLoaded', () => {
  
  // Get customer ID from global variable (set by customerId.js)
  let customerId = window.customerId || "C1001";
  
  /**
   * Display discount prices from backend
   * 
   * Fetches annotated cart data and displays discount prices for products
   * that are eligible for customer loyalty discounts.
   * 
   * @async
   * @function showDiscounts
   * @returns {Promise<void>}
   * @throws {Error} If API call fails or data parsing fails
   * @example
   * // Display discount prices for all products
   * await showDiscounts();
   */
  async function showDiscounts() {
    try {
      // Fetch annotated cart data with customer ID
      const response = await fetch(`http://localhost:8000/cart/annotated?customer_id=${customerId}`);
      const data = await response.json();
      
      // Iterate through all items and display discount prices
      data.items.forEach(item => {
        const discountEl = document.getElementById(`discount-${item.productId}`);
        if (discountEl && item.rabatt && item.discounted_unit_price < item.unit_price) {
          discountEl.textContent = `${item.discounted_unit_price.toFixed(2)} € (Treuebonus)`;
          discountEl.style.display = 'block';
          discountEl.style.color = '#dc2626';
          discountEl.style.fontWeight = 'bold';
        }
      });
    } catch (error) {
      console.error('Error loading discount prices:', error);
    }
  }

  // Display discounts on page load
  showDiscounts();

  /**
   * Event listener for buy button clicks
   * 
   * Handles adding products to cart, updating discount displays,
   * and opening the cart drawer.
   * 
   * @param {Event} e - The click event
   */
  document.addEventListener('click', async (e) => {
    const buyBtn = e.target.closest('.buy-btn');
    if (!buyBtn) return;

    const productId = buyBtn.dataset.productId;
    
    try {
      // Get current quantity and add 1
      const cartResponse = await fetch(`http://localhost:8000/cart?customer_id=${customerId}`);
      const cart = await cartResponse.json();
      const existingItem = cart.items.find(item => item.productId === productId);
      const newQuantity = existingItem ? existingItem.quantity + 1 : 1;

      // Backend performs all calculations - only set quantity with customer ID
      await fetch(`http://localhost:8000/cart/items/${productId}?customer_id=${customerId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity: newQuantity })
      });

      // Refresh discount display
      await showDiscounts();

      // Notify CartDrawer component
      window.dispatchEvent(new CustomEvent('cartUpdated'));

      // Open cart drawer
      const drawer = document.getElementById('drawer');
      if (drawer) drawer.showModal();

    } catch (error) {
      console.error('Error adding product to cart:', error);
    }
  });
});
</script>


<style>
  .content-container {
    padding: 40px 20px;
    background-color: white;
  }

  .img-container {
    background-image: linear-gradient(to bottom, #bdc2c9, #ced1d6, #dfe0e4, #efeff1, #ffffff);
  }

  .product-details {
    margin: 15px 0 40px 0;
  }

  .price-container {
    margin: 20px 0;
  }

  .price {
    font-size: 24px;
    margin: 0;
  }

  .discount-price {
    font-size: 16px;
    margin-left: 20px;
    margin-top: 5px;
    font-weight: 200;
  }

  .buy-btn {
    cursor: pointer;
    border: none;
    background: none;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .buy-btn:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  @media screen and (max-width: 669px) {
    .product {
      max-width: 370px;
    }
  }
</style>
